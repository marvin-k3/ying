name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  merge_group:

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  checks: write
  pull-requests: write  # For coverage comments

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Separate job for security scanning - no checkout of untrusted code
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Security: Don't fetch full history to reduce attack surface
          fetch-depth: 1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Main test job with matrix strategy
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    # Security: Separate permissions for test job
    permissions:
      contents: read
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        # Can expand to ["3.12", "3.13"] when 3.13 is stable

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Security: Shallow clone for speed and security
          fetch-depth: 1

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
          cache-prefix: rye-${{ matrix.python-version }}

      - name: Sync dependencies
        run: |
          rye sync --no-dev
          rye sync

      - name: Run linting
        run: |
          rye run lint

      - name: Run type checking
        run: |
          rye run typecheck

      - name: Run unit tests
        run: |
          rye run test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          # Security: Use token for private repos, fail_ci_if_error for security
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

  # Integration tests - separate job with optional API key
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]  # Only run if unit tests pass
    
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true

      - name: Sync dependencies
        run: |
          rye sync --no-dev
          rye sync

      - name: Run integration tests (Shazam only)
        run: |
          rye run test-integration
        env:
          # Security: Only basic integration tests, no API keys from secrets for PR
          YING_ENABLE_LIVE_TESTS: 1

      # AcoustID support removed - only Shazam is supported

  # Docker build test to ensure containerization works
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Security: Only build, don't push for PRs
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ying:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Summary job that depends on all others
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security-checks, test, integration-test, docker-build]
    if: always()
    
    permissions:
      contents: read

    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.security-checks.result }}" != "success" ||
                "${{ needs.test.result }}" != "success" ||
                "${{ needs.integration-test.result }}" != "success" ||
                "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs succeeded!"
